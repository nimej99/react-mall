{"version":3,"file":"static/js/880.14b5bcd8.chunk.js","mappings":"+IA2DA,UAzDA,SAAoBA,GAGlB,IAAIC,GAAQC,EAAAA,EAAAA,OAAK,SAAUF,GAEzB,OADAG,QAAQC,IAAI,yCAEVC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,iNACLF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAIP,EAAMS,MAAM,qDAGtB,IAEAC,GAAwBC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BD,EAAKG,EAAA,GAAEE,EAAQF,EAAA,GACpBG,GAAsBJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,IAQhBG,EAAAA,EAAAA,UAAQ,WACN,MANK,2DAOP,GAAG,IAHL,IAOAC,GAAmCC,EAAAA,EAAAA,iBAAeC,GAAAT,EAAAA,EAAAA,GAAAO,EAAA,GAA7CG,EAASD,EAAA,GAAEE,EAAeF,EAAA,GAC3BG,EAAI,IAAIC,MAAM,KAAOC,KAAK,GAE1BC,GAAQC,EAAAA,EAAAA,kBAAiBZ,GAE7B,OACEZ,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAACP,EAAK,CAACQ,MAAOA,KACdD,EAAAA,EAAAA,KAAA,UAAQsB,QAAS,WACfhB,EAASL,EAAQ,EACnB,EAAEF,SAAC,OAEHC,EAAAA,EAAAA,KAAA,SAAOuB,KAAK,OAAOC,SAAU,SAACC,GAE5BT,GAAgB,kBACdN,EAAQe,EAAEC,OAAOC,MAAM,GAE3B,IAEEZ,EACE,qBACAE,EAAEW,KAAI,WACN,OAAO5B,EAAAA,EAAAA,KAAA,OAAAD,SAAMqB,GACf,MAIR,C","sources":["components/LightHouse.js"],"sourcesContent":["import React, { memo, useMemo, useState, useTransition, useDeferredValue } from 'react';\r\n\r\nfunction LightHouse(props) {\r\n\r\n  // memo = props가 변할 때만 재렌더링됨\r\n  let Child = memo(function (props) {\r\n    console.log('자식재렌더링')\r\n    return (\r\n      <>\r\n        <div>자식임. 부모 렌더링시 자식도 재렌더링됨 자식이 무겁다면? 부모도 오래걸린다.</div>\r\n        <p>{props.count} props 쓸때만 렌더링 </p>\r\n      </>\r\n    )\r\n  })\r\n\r\n  let [count, setCount] = useState(0);\r\n  let [name, setName] = useState('');\r\n\r\n  function 함수() {\r\n    return '반복문10억번돌린 결과'\r\n  }\r\n\r\n  // 컴포넌트 렌더링시 1회만 실행\r\n  let result =\r\n    useMemo(() => {\r\n      return 함수()\r\n    }, []);\r\n\r\n  //성능저하 실험 useTransition 함수 시간을 늦춤(html만들고 div 만개만들고 셋함수 실행)\r\n  //isPending은 startTransition함수가 실행중일떄 true, 오래걸리는 작업 미루고 로딩중 ㄱㄱ\r\n  let [isPending, startTransition] = useTransition();\r\n  let a = new Array(10000).fill(0);\r\n\r\n  let state = useDeferredValue(name) //이것도 늦게처리함\r\n\r\n  return (\r\n    <div>\r\n      <Child count={count} />\r\n      <button onClick={() => {\r\n        setCount(count + 1)\r\n      }}>+</button>\r\n\r\n      <input type=\"text\" onChange={(e)=>{\r\n        // 성능저하 상태변경 함수를 감싸준다.\r\n        startTransition(()=>\r\n          setName(e.target.value)\r\n        )\r\n      }} />\r\n      {\r\n        isPending \r\n        ? '로딩중' \r\n        : a.map(()=>{\r\n          return <div>{state}</div>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LightHouse;"],"names":["props","Child","memo","console","log","_jsxs","_Fragment","children","_jsx","count","_useState","useState","_useState2","_slicedToArray","setCount","_useState3","_useState4","name","setName","useMemo","_useTransition","useTransition","_useTransition2","isPending","startTransition","a","Array","fill","state","useDeferredValue","onClick","type","onChange","e","target","value","map"],"sourceRoot":""}